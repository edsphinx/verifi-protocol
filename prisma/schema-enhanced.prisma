// Enhanced Prisma Schema for DeFi Dashboard
// This is the NEW schema with analytics and tracking capabilities

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// EXISTING MODELS (Enhanced)
// ============================================================================

model Market {
  id                  String   @id @default(uuid())
  marketAddress       String   @unique @map("market_address")
  creatorAddress      String   @map("creator_address")
  description         String
  category            String?  // NEW: Market category for filtering
  resolutionTimestamp DateTime @map("resolution_timestamp")
  status              String   @default("active")

  // Enhanced metrics
  totalVolume         Float    @default(0) @map("total_volume")
  volume24h           Float    @default(0) @map("volume_24h")
  volume7d            Float    @default(0) @map("volume_7d")
  totalTrades         Int      @default(0) @map("total_trades")
  uniqueTraders       Int      @default(0) @map("unique_traders")

  // Pricing (from AMM or primary issuance)
  yesPrice            Float    @default(0.5) @map("yes_price")
  noPrice             Float    @default(0.5) @map("no_price")
  yesSupply           Float    @default(0) @map("yes_supply")
  noSupply            Float    @default(0) @map("no_supply")

  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  activities          Activity[]
  pools               TappPool[]
  priceHistory        MarketPriceHistory[]
  volumeHistory       MarketVolumeHistory[]
  positions           UserPosition[]

  @@index([status])
  @@index([creatorAddress])
  @@index([volume24h])
  @@map("markets")
}

model Activity {
  id            String   @id @default(uuid())
  txHash        String   @unique @map("tx_hash")
  marketAddress String   @map("market_address")
  userAddress   String   @map("user_address")
  action        String   // "BUY", "SELL", "LIQUIDITY_ADD", "LIQUIDITY_REMOVE", "SWAP"
  outcome       String?  // "YES" or "NO" (optional for liquidity)
  amount        Float    // Amount in shares or liquidity
  price         Float?   // Price at execution (for trades/swaps)
  totalValue    Float?   // Total value in APT
  timestamp     DateTime @default(now())

  // Relations
  market        Market?  @relation(fields: [marketAddress], references: [marketAddress])

  @@index([marketAddress, timestamp])
  @@index([userAddress, timestamp])
  @@index([action])
  @@map("activities")
}

model TappPool {
  id              String   @id @default(uuid())
  poolAddress     String   @unique @map("pool_address")
  marketAddress   String   @map("market_address")
  hookType        Int      @map("hook_type") // 4 = prediction hook
  yesTokenAddress String   @map("yes_token_address")
  noTokenAddress  String   @map("no_token_address")
  fee             Int      // Fee in basis points (e.g., 3000 = 0.3%)
  creatorAddress  String   @map("creator_address")

  // Enhanced liquidity metrics
  totalLiquidity  Float    @default(0) @map("total_liquidity")
  yesReserve      Float    @default(0) @map("yes_reserve")
  noReserve       Float    @default(0) @map("no_reserve")

  // Volume metrics
  volume24h       Float    @default(0) @map("volume_24h")
  volume7d        Float    @default(0) @map("volume_7d")
  volumeAllTime   Float    @default(0) @map("volume_all_time")

  // Fee metrics
  fees24h         Float    @default(0) @map("fees_24h")
  fees7d          Float    @default(0) @map("fees_7d")
  feesAllTime     Float    @default(0) @map("fees_all_time")

  // Performance metrics
  apy7d           Float    @default(0) @map("apy_7d")
  utilization     Float    @default(0) // % = volume24h / totalLiquidity

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  market          Market?  @relation(fields: [marketAddress], references: [marketAddress])
  liquidityPositions LiquidityPosition[]

  @@index([marketAddress])
  @@index([totalLiquidity])
  @@index([volume24h])
  @@map("tapp_pools")
}

model Notification {
  id              String   @id @default(uuid())
  type            String   // "NEW_MARKET", "POOL_CREATED", "LARGE_TRADE", "MARKET_RESOLVED", etc.
  title           String
  message         String
  relatedAddress  String?  @map("related_address") // Market or pool address
  txHash          String?  @map("tx_hash")
  metadata        Json?    // Additional data (creator, amounts, etc.)
  isGlobal        Boolean  @default(false) @map("is_global")
  targetUser      String?  @map("target_user")
  read            Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([targetUser, createdAt])
  @@index([isGlobal, createdAt])
  @@map("notifications")
}

// ============================================================================
// NEW MODELS FOR DASHBOARD ANALYTICS
// ============================================================================

// Time-series data for market prices (updated hourly or on-trade)
model MarketPriceHistory {
  id            String   @id @default(uuid())
  marketAddress String   @map("market_address")
  yesPrice      Float    @map("yes_price")
  noPrice       Float    @map("no_price")
  timestamp     DateTime

  market        Market   @relation(fields: [marketAddress], references: [marketAddress])

  @@unique([marketAddress, timestamp])
  @@index([marketAddress, timestamp])
  @@map("market_price_history")
}

// Time-series data for market volume (aggregated daily)
model MarketVolumeHistory {
  id            String   @id @default(uuid())
  marketAddress String   @map("market_address")
  volume        Float    // Volume in APT for the period
  trades        Int      // Number of trades
  uniqueUsers   Int      @map("unique_users")
  date          DateTime // Date (without time, for daily aggregation)

  market        Market   @relation(fields: [marketAddress], references: [marketAddress])

  @@unique([marketAddress, date])
  @@index([marketAddress, date])
  @@map("market_volume_history")
}

// User positions (for portfolio tracking)
model UserPosition {
  id              String   @id @default(uuid())
  userAddress     String   @map("user_address")
  marketAddress   String   @map("market_address")
  outcome         String   // "YES" or "NO"

  // Position details
  sharesOwned     Float    @map("shares_owned")
  avgEntryPrice   Float    @map("avg_entry_price")
  totalInvested   Float    @map("total_invested")

  // Current state
  currentPrice    Float    @map("current_price")
  currentValue    Float    @map("current_value")
  unrealizedPnL   Float    @map("unrealized_pnl")
  unrealizedPnLPct Float   @map("unrealized_pnl_pct")

  status          String   @default("OPEN") // "OPEN", "CLOSED", "RESOLVED"

  // If closed/resolved
  exitPrice       Float?   @map("exit_price")
  realizedPnL     Float?   @map("realized_pnl")
  closedAt        DateTime? @map("closed_at")

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  market          Market   @relation(fields: [marketAddress], references: [marketAddress])

  @@unique([userAddress, marketAddress, outcome])
  @@index([userAddress, status])
  @@index([marketAddress])
  @@map("user_positions")
}

// Liquidity provider positions (for LP tracking)
model LiquidityPosition {
  id                String   @id @default(uuid())
  userAddress       String   @map("user_address")
  poolAddress       String   @map("pool_address")
  marketAddress     String   @map("market_address")

  // LP details
  lpTokens          Float    @map("lp_tokens") // LP share tokens owned
  liquidityProvided Float    @map("liquidity_provided") // Initial APT value
  yesAmount         Float    @map("yes_amount")
  noAmount          Float    @map("no_amount")

  // Current state
  currentValue      Float    @map("current_value")
  feesEarned        Float    @default(0) @map("fees_earned")
  unrealizedPnL     Float    @map("unrealized_pnl")
  apr               Float    @default(0) // Current APR

  status            String   @default("ACTIVE") // "ACTIVE", "WITHDRAWN"

  withdrawnAt       DateTime? @map("withdrawn_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  pool              TappPool @relation(fields: [poolAddress], references: [poolAddress])

  @@index([userAddress, status])
  @@index([poolAddress])
  @@map("liquidity_positions")
}

// Protocol-wide metrics (updated periodically via cron job)
model ProtocolMetrics {
  id                String   @id @default(uuid())

  // Volume metrics
  totalVolume       Float    @map("total_volume")
  volume24h         Float    @map("volume_24h")
  volume7d          Float    @map("volume_7d")

  // TVL metrics
  totalValueLocked  Float    @map("total_value_locked")
  tvlChange24h      Float    @map("tvl_change_24h")

  // Market metrics
  totalMarkets      Int      @map("total_markets")
  activeMarkets     Int      @map("active_markets")
  resolvedMarkets   Int      @map("resolved_markets")

  // User metrics
  totalUsers        Int      @map("total_users")
  activeUsers24h    Int      @map("active_users_24h")
  activeUsers7d     Int      @map("active_users_7d")

  // Trade metrics
  totalTrades       Int      @map("total_trades")
  trades24h         Int      @map("trades_24h")

  // Pool metrics
  totalPools        Int      @map("total_pools")
  totalLiquidity    Float    @map("total_liquidity")

  timestamp         DateTime @default(now())

  @@index([timestamp])
  @@map("protocol_metrics")
}

// Daily aggregated metrics for historical charts
model DailyMetrics {
  id                String   @id @default(uuid())
  date              DateTime @unique

  // Daily snapshots
  totalVolume       Float    @map("total_volume")
  totalTrades       Int      @map("total_trades")
  activeUsers       Int      @map("active_users")
  tvl               Float

  createdAt         DateTime @default(now()) @map("created_at")

  @@index([date])
  @@map("daily_metrics")
}

// User stats (for leaderboards and trader profiles)
model UserStats {
  id                String   @id @default(uuid())
  userAddress       String   @unique @map("user_address")

  // Trading stats
  totalVolume       Float    @default(0) @map("total_volume")
  volume24h         Float    @default(0) @map("volume_24h")
  totalTrades       Int      @default(0) @map("total_trades")
  trades24h         Int      @default(0) @map("trades_24h")

  // Performance
  totalPnL          Float    @default(0) @map("total_pnl")
  winningTrades     Int      @default(0) @map("winning_trades")
  losingTrades      Int      @default(0) @map("losing_trades")
  winRate           Float    @default(0) @map("win_rate")

  // Liquidity providing
  totalLiquidityProvided Float @default(0) @map("total_liquidity_provided")
  feesEarnedAllTime Float    @default(0) @map("fees_earned_all_time")

  // Rankings
  volumeRank        Int?     @map("volume_rank")
  pnlRank           Int?     @map("pnl_rank")

  lastUpdated       DateTime @updatedAt @map("last_updated")

  @@index([totalVolume])
  @@index([totalPnL])
  @@map("user_stats")
}
