import * as dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";
import { namedAddress as fullNamedAddress, nodeUrl } from "./_config"; // Importing node URL from config

// --- Configuration ---
const projectRoot = path.resolve(__dirname, "..", "..");

// Load environment variables
dotenv.config({ path: path.resolve(projectRoot, ".env.local") });
dotenv.config({ path: path.resolve(projectRoot, ".env"), override: true });

// Extract the publisher account address
const accountAddress = fullNamedAddress.split("=")[1];
if (!accountAddress) {
  console.error("❌ Could not parse account address from config.");
  process.exit(1);
}

const OUTPUT_DIR = path.join(projectRoot, "aptos", "abis");

async function main() {
  console.log("📝 Generating TypeScript ABIs from the node...");

  // Build the API URL to get all modules for the account
  const cleanNodeUrl = nodeUrl.endsWith("/v1") ? nodeUrl.slice(0, -3) : nodeUrl;
  const apiUrl = `${cleanNodeUrl}/v1/accounts/${accountAddress}/modules`;
  console.log(`📡 Fetching modules from: ${apiUrl}`);

  try {
    const response = await fetch(apiUrl);
    if (!response.ok) {
      throw new Error(
        `Failed to fetch modules. Status: ${response.status} ${response.statusText}`,
      );
    }
    const modulesData = await response.json();

    if (!Array.isArray(modulesData) || modulesData.length === 0) {
      console.warn("⚠️ No modules found for this account on the node.");
      return;
    }

    // Ensure the output directory exists
    if (!fs.existsSync(OUTPUT_DIR)) {
      fs.mkdirSync(OUTPUT_DIR, { recursive: true });
    }

    const indexFileContent: string[] = [];

    for (const moduleInfo of modulesData) {
      const abiContent = moduleInfo.abi;

      if (!abiContent || !abiContent.name) {
        console.warn("⏩ Skipping a module with no ABI content or name.");
        continue;
      }

      const moduleName = abiContent.name;
      const moduleNameUpper = moduleName.toUpperCase();
      const tsFileName = `${moduleName}.abi.ts`;
      const tsFilePath = path.join(OUTPUT_DIR, tsFileName);

      const tsContent = `
// This file is generated by 'pnpm move:get_abi'. DO NOT EDIT MANUALLY.
export const ${moduleNameUpper}_ABI = ${JSON.stringify(abiContent, null, 2)} as const;
      `;

      fs.writeFileSync(tsFilePath, tsContent);
      console.log(`✅ Generated ABI for: ${tsFileName}`);

      // Prepare the export line for the index file
      const exportName = `${moduleNameUpper}_ABI`;
      const exportPath = `./${tsFileName.replace(".ts", "")}`;
      indexFileContent.push(`export { ${exportName} } from "${exportPath}";`);
    }

    if (indexFileContent.length > 0) {
      const indexTsPath = path.join(OUTPUT_DIR, "index.ts");
      fs.writeFileSync(indexTsPath, indexFileContent.join("\n"));
      console.log(`✅ Generated main ABI index file at ${indexTsPath}`);
    }

    console.log(
      "✅ Raw ABI generation complete. Run 'pnpm format' to format the new files.",
    );
  } catch (error) {
    console.error("❌ Error generating ABIs:", error);
    console.error(
      "Please ensure your local node is running and the contract has been published successfully.",
    );
    process.exit(1);
  }
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
